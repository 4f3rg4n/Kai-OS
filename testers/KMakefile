# Set the C compiler and debugger
CC = clang
GDB = gdb 

LD = ld.lld
ASM = nasm

# Include directories
INC = -Iinc/

# Source and header files
SRC = $(wildcard src/*.c shell/src/*.c)

# Object files
OBJ = ${SRC:.c=.o}

# Compiler and linker flags
CCFLAGS = -Iinc -ggdb -c -ffreestanding -target x86_64-none-elf -Wincompatible-library-redeclaration
LDFLAGS = -T kernel.ld
LDFLAGS_BIN = ${LDFLAGS} --oformat binary
ASFLAGS = -f elf64

# Default targets
all: kernel kernel.elf

# Linking kernel binary
kernel: ${OBJ}
	${LD} -o $@ ${LDFLAGS_BIN} $^

# Linking kernel ELF
kernel.elf: ${OBJ}
	${LD} -o $@ ${LDFLAGS} $^

# Compile C source files into object files
src/%.o: src/%.h src/%.c 
	${CC} ${CCFLAGS} ${INC} -o $@ $<

shell/src/%.o: shell/include/%.h shell/src/%.c
	${CC} ${CCFLAGS} ${INC} -o $@ $<

# Compile assembly files into object files
%.o: %.asm
	${ASM} $< ${ASFLAGS} -o $@

# Clean up build artifacts
clean:
	rm -f kernel kernel.elf src/*.o shell/src/*.o
